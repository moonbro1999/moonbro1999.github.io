<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>最大子列和问题</title>
    <url>/2020/04/17/%E6%9C%80%E5%A4%A7%E5%AD%90%E5%88%97%E5%92%8C%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>gets()，scanf()的区别</title>
    <url>/2020/04/13/gets%C2%80-%EF%BC%8Cscanf/</url>
    <content><![CDATA[<p>C语言 gets（）和scanf（）函数的区别<br>scanf( )函数和gets( )函数都可用于输入字符串，但在功能上有区别。若想从键盘上输入字符串”hi hello”，则应该使用<strong>gets</strong>函数。</p>
<p>gets可以接收空格；而scanf遇到空格、回车和Tab键都会认为输入结束，所有它不能接收空格。</p>
<p>char string[15]; gets(string); /<em>遇到回车认为输入结束</em>/</p>
<p>scanf(“%s”,string); /<em>遇到空格认为输入结束</em>/</p>
<p>所以在输入的字符串中包含空格时，应该使用gets输入。</p>
<p>scanf和gets获取字符串时的区别</p>
<p>在C语言中，能构获取字符串的函数至少有两个：</p>
<p>1.scanf()</p>
<p>所在头文件：stdio.h</p>
<p>语法：scanf(“格式控制字符串”,变量地址列表);</p>
<p>接受字符串时：scanf(“%s”,字符数组名或指针);</p>
<p>2.gets()</p>
<p>所在头文件：stdio.h</p>
<p>语法：gets(字符数组名或指针);</p>
<p>两者在接受字符串时：</p>
<p>1.不同点：</p>
<p>scanf不能接受空格、制表符Tab、回车等；</p>
<p>而gets能够接受空格、制表符Tab和回车等；</p>
<p>2.相同点：</p>
<p>字符串接受结束后自动加’\0’。</p>
<p>例1：</p>
<p>#include &lt;stdio.h&gt;</p>
<p>main()</p>
<p>{</p>
<p>char ch1[10],ch2[10];</p>
<p>scanf(“%s”,ch1);</p>
<p>gets(ch2);</p>
<p>}</p>
<p>依次键入asd空格fg回车，asd空格fg回车，则ch1=”asd\0”，ch2=”asd fg\0”。</p>
<p>例2：</p>
<p>#include &lt;stdio.h&gt;</p>
<p>main()</p>
<p>{</p>
<p>char ch1[10],ch2[10],c1,c2;</p>
<p>scanf(“%s”,ch1);</p>
<p>c1=getchar();</p>
<p>gets(ch2);</p>
<p>c2=getchar();</p>
<p>}</p>
<p>依次键入asdfg回车，asdfg回车，则ch1=”asdfg\0”，c1=’\n’，ch2=”asdfg\0”，c2需输入。</p>
<p>scanf ：当遇到回车，空格和tab键会自动在字符串后面添加’\0’，但是回车，空格和tab键仍会留在输入的缓冲区中。</p>
<p>gets：可接受回车键之前输入的所有字符，并用’\n’替代 ‘\0’.回车键不会留在输入缓冲区中</p>
<p>gets()用到读取字符串，用回车结束输入</p>
<p>scanf()可以读取所有类型的变量</p>
]]></content>
      <categories>
        <category>-c</category>
      </categories>
      <tags>
        <tag>-c</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言中所有百分号后加上字母</title>
    <url>/2019/10/16/%E6%96%87%E7%AB%A02/</url>
    <content><![CDATA[<p>%后加字母是格式控制符，格式控制符包括格式说明和格式字符。格式说明由“％”和格式字符组成,如％d％f等.<br>它的作用是将输出或输入的数据转换为指定的格式输出或输入.格式说明总是由“％”字符开始的.不同类型的数据用不同的格式字符.<br>格式字符有d,o,x,u,c,s,f,e,g等.<br>如：<br>％d整型输出（int 类型）,％ld长整型输出,（long 类型）<br>％o以八进制数形式输出整数,<br>％x以十六进制数形式输出整数,<br>％u以十进制数输出unsigned型数据(无符号数–都为正数).<br>％c用来输出一个字符,<br>％s用来输出一个字符串,<br>％f用来输出实数,以小数形式输出,(float类型)<br>%lf用来输出实数,以小数形式输出,(double类型)<br>％e以指数形式输出实数,<br>％g根据大小自动选f格式或e格式,且不输出无意义的零.<br>int、long 表示整数<br>float、double表示浮点数，数学里的小数<br>格式控制符“%p”中的p是pointer（指针）的缩写。指针的值是语言实现（编译程序）相关的，但几乎所有实现中，指针的值都是一个表示地址空间中某个存储器单元的整数。printf函数族中对于%p一般以十六进制整数方式输出指针的值，附加前缀0x。<br>%p是打印地址的, %x是以十六进制形式打印, 完全不同！另外在64位下结果会不一样, 所以打印指针老老实实用%p .</p>
]]></content>
      <categories>
        <category>-c</category>
      </categories>
      <tags>
        <tag>-c</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言运算符中箭头的含义</title>
    <url>/2019/10/16/%E6%96%87%E7%AB%A01/</url>
    <content><![CDATA[<p>-&gt;在C语言中，叫做指向结构体成员运算符，用处是使用一个指向结构体或对象的指针访问其内成员。</p>
<p>一个指针当用来指向一个结构体、对象时，称之为结构体指针或对象指针。结构体指针或对象指针中的值是所指向的结构体或对象的首地址。通过结构体指针或对象指针即可访问该结构体或对象。</p>
<p>指向结构体成员运算符需要用到结构体关键字struct和C++类关键字class。结构体指针和对象指针定义的形式如下：</p>
<p>1、struct 结构体类型名 *指针名；</p>
<p>2、struct 结构体类型名 *指针名 = &amp;一个结构体的名字。</p>
<p><img src="/images/%E7%AE%AD%E5%A4%B4.png" alt="图例"></p>
<p>扩展资料：<br>C语言中访问结构体成员时 点 . 和 箭头 -&gt; 的区别</p>
<p>点（.）是用于结构体变量访问成员，箭头（-&gt;）是用于结构体指针访问成员。</p>
<p>相同点：两个都是二元操作符，其右操作符是成员的名称。</p>
<p>不同点：点操作符左边的操作数是一个“结果为结构”的表达式； 箭头操作符左边的操作数是一个指向结构的指针。</p>
]]></content>
      <categories>
        <category>-c</category>
      </categories>
      <tags>
        <tag>-c</tag>
      </tags>
  </entry>
  <entry>
    <title>你好呀</title>
    <url>/2019/10/16/hello-world/</url>
    <content><![CDATA[<p>欢迎来到这~ 玩的开心~</p>
]]></content>
  </entry>
</search>
